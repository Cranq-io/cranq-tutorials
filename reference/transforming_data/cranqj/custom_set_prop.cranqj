{"prototypes":{"apis/airtable/Records insert request builder":{"description":"","interface":{"inputs":{"base ID":{"description":"","type":"any"},"table name":{"description":"","type":"any"},"API key":{"description":"","type":"any"},"table":{"description":"","type":"any"}},"outputs":{"verb":{"description":"","type":"any"},"URL":{"description":"","type":"any"},"headers":{"description":"","type":"any"},"body":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"build records":{"coordinates":[-77,25],"description":"","params":{},"prototype":"apis/airtable/Table to AirTable records converter"},"build URL":{"coordinates":[103,-118],"description":"","params":{"template":"\"https://api.airtable.com/v0/{base ID}/{table name}\""},"prototype":"string/Template filler"},"sync URL params":{"coordinates":[-84,-162],"description":"","params":{"fields":"[\"base ID\", \"table name\"]"},"prototype":"flow/Syncer"},"\"POST\"":{"coordinates":[23,187],"description":"","params":{"data":"\"POST\""},"prototype":"data/Store"},"table":{"coordinates":[-191,99],"description":"","params":{},"prototype":"flow/Forwarder"},"build headers":{"coordinates":[3,-56],"description":"","params":{"headers":"{\"Content-Type\":\"application/json\"}"},"prototype":"io/http/Bearer token inserter"},"wrap records":{"coordinates":[19,75],"description":"","params":{"fields":"[\"records\"]"},"prototype":"flow/Syncer"},"to JSON":{"coordinates":[107,21],"description":"","params":{},"prototype":"data/dictionary/JSON serializer"}},"connections":{"sync URL params":{"synced":{"build URL":{"params":{"description":""}}}},"table":{"data":{"build records":{"table":{"description":""}},"\"POST\"":{"read":{"description":""}}}},"wrap records":{"synced":{"to JSON":{"dict":{"description":""}}}},"build records":{"records":{"wrap records":{"records":{"description":""}}}}},"forwards":{"inputs":{"API key":{"build headers":{"token":{}}},"table":{"table":{"data":{}}},"base ID":{"sync URL params":{"base ID":{}}},"table name":{"sync URL params":{"table name":{}}}},"outputs":{"verb":{"\"POST\"":{"data":{}}},"URL":{"build URL":{"filled":{}}},"headers":{"build headers":{"headers":{}}},"body":{"to JSON":{"json":{}}}}}}}},"apis/airtable/Records inserter":{"description":"Inserts a list of records into the specified AirTable table.","interface":{"inputs":{"base ID":{"description":"","type":"any"},"table name":{"description":"","type":"any"},"API key":{"description":"","type":"any"},"table":{"description":"","type":"any"}},"outputs":{"response body":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"build request":{"coordinates":[-71,-130],"description":"","params":{},"prototype":"apis/airtable/Records insert request builder"},"dispatch request":{"coordinates":[85,152],"description":"","params":{},"prototype":"io/http/Request dispatcher"},"sync inputs":{"coordinates":[-160,96],"description":"","params":{},"prototype":"flow/Forwarder/quadruple"},"parse body":{"coordinates":[131,-88],"description":"","params":{},"prototype":"data/dictionary/JSON parser"}},"connections":{"build request":{"URL":{"dispatch request":{"url":{"description":""}}},"headers":{"dispatch request":{"headers":{"description":""}}},"body":{"dispatch request":{"body":{"description":""}}},"verb":{"dispatch request":{"verb":{"description":""}}}},"sync inputs":{"1":{"build request":{"base ID":{"description":""}}},"2":{"build request":{"table name":{"description":""}}},"3":{"build request":{"API key":{"description":""}}},"4":{"build request":{"table":{"description":""}}}},"dispatch request":{"body":{"parse body":{"json":{"description":""}}}}},"forwards":{"inputs":{"base ID":{"sync inputs":{"1":{}}},"table name":{"sync inputs":{"2":{}}},"API key":{"sync inputs":{"3":{}}},"table":{"sync inputs":{"4":{}}}},"outputs":{"response body":{"parse body":{"parsed":{}}}}}}}},"apis/airtable/Record inserter":{"description":"Inserts a single record into the specified AirTable table.","interface":{"inputs":{"base ID":{"description":"","type":"any"},"table name":{"description":"","type":"any"},"API key":{"description":"","type":"any"},"record":{"description":"","type":"any"}},"outputs":{"response body":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"insert records":{"coordinates":[-6,-75],"description":"","params":{},"prototype":"apis/airtable/Records inserter"},"wrap in array":{"coordinates":[-5,74],"description":"","params":{"count":"1"},"prototype":"data/array/Builder"}},"connections":{"wrap in array":{"array":{"insert records":{"table":{"description":""}}}}},"forwards":{"inputs":{"base ID":{"insert records":{"base ID":{}}},"table name":{"insert records":{"table name":{}}},"API key":{"insert records":{"API key":{}}},"record":{"wrap in array":{"item":{}}}},"outputs":{"response body":{"insert records":{"response body":{}}}}}}}},"apis/airtable/Table to AirTable records converter":{"description":"Converts plain table to list of AirTable records.","interface":{"inputs":{"table":{"description":"","type":"any"}},"outputs":{"records":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"map records":{"coordinates":[40,-41],"description":"","params":{},"prototype":"data/array/Mapper"},"wrap record":{"coordinates":[-48,45],"description":"","params":{"dict":"{}","key":"\"fields\""},"prototype":"data/dictionary/Item setter"}},"connections":{"map records":{"item":{"wrap record":{"value":{"description":""}}}},"wrap record":{"dict":{"map records":{"mapped item":{"description":""}}}}},"forwards":{"inputs":{"table":{"map records":{"array":{}}}},"outputs":{"records":{"map records":{"mapped":{}}}}}}}},"apis/fx/Yahoo Finance":{"description":"","interface":{"inputs":{"symbol":{"description":"","type":"any"}},"outputs":{"instrument":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"dispatch request":{"coordinates":[64,-49],"description":"","params":{"verb":"\"GET\"","headers":"{}","body":"\"\""},"prototype":"io/http/Request dispatcher"},"build URL":{"coordinates":[-69,-101],"description":"","params":{"template":"\"https://query2.finance.yahoo.com/v8/finance/chart/{symbol}\""},"prototype":"string/Template filler"},"wrap symbol":{"coordinates":[-77,64],"description":"","params":{"fields":"[\"symbol\"]"},"prototype":"flow/Syncer"},"parse response":{"coordinates":[112,88],"description":"","params":{},"prototype":"data/dictionary/JSON parser"}},"connections":{"wrap symbol":{"synced":{"build URL":{"params":{"description":""}}}},"build URL":{"filled":{"dispatch request":{"url":{"description":""}}}},"dispatch request":{"body":{"parse response":{"json":{"description":""}}}}},"forwards":{"inputs":{"symbol":{"wrap symbol":{"symbol":{}}}},"outputs":{"instrument":{"parse response":{"parsed":{}}}}}}}},"apis/fx/Yahoo index getter":{"description":"","interface":{"inputs":{"symbol":{"description":"","type":"any"}},"outputs":{"index":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"fetch instrument":{"coordinates":[-41,-83],"description":"","params":{},"prototype":"apis/fx/Yahoo Finance"},"query index":{"coordinates":[57,88],"description":"","params":{"path":"[\"chart\", \"result\", \"0\", \"meta\", \"regularMarketPrice\"]"},"prototype":"data/tree/Node getter"}},"connections":{"fetch instrument":{"instrument":{"query index":{"tree":{"description":""}}}}},"forwards":{"inputs":{"symbol":{"fetch instrument":{"symbol":{}}}},"outputs":{"index":{"query index":{"node":{}}}}}}}},"boolean/And":{"description":"Outputs 'a' AND 'b'.","interface":{"inputs":{"a":{"type":"boolean"},"b":{"type":"boolean"}},"outputs":{"and":{"type":"boolean"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\",\"b\"]"},"prototype":"flow/Syncer"},"and":{"coordinates":[0,0],"description":"","params":{},"prototype":"boolean/And/_"}},"connections":{"sync a & b":{"synced":{"and":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"and":{"and":{"and":{}}}}}}}},"boolean/And/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":boolean,\"b\":boolean}"}},"outputs":{"and":{"type":"boolean"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"outputs.and(data.a && data.b, tag);"}}}},"boolean/Condition":{"description":"","interface":{"inputs":{"boolean":{"description":"","type":"any"}},"outputs":{"true":{"description":"","type":"any"},"false":{"description":"","type":"any"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"boolean":"if (data)\n  outputs.true(null, tag);\nelse\n  outputs.false(null, tag);\n"}}}},"boolean/Equality tester":{"description":"Checks if boolean 'a' is equal to boolean 'b'.","interface":{"inputs":{"a":{"type":"boolean"},"b":{"type":"boolean"}},"outputs":{"equal":{"type":"boolean"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\",\"b\"]"},"prototype":"flow/Syncer"},"equal":{"coordinates":[0,0],"description":"","params":{},"prototype":"boolean/Equality tester/_"}},"connections":{"sync a & b":{"synced":{"equal":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"equal":{"equal":{"equal":{}}}}}}}},"boolean/Equality tester/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":boolean,\"b\":boolean}"}},"outputs":{"equal":{"type":"boolean"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"outputs.equal(data.a === data.b, tag);"}}}},"boolean/Not":{"description":"","interface":{"inputs":{"a":{"type":"boolean"}},"outputs":{"not":{"type":"boolean"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a":"outputs.not(!data, tag);"}}}},"boolean/Or":{"description":"Outputs 'a' OR 'b'.","interface":{"inputs":{"a":{"type":"boolean"},"b":{"type":"boolean"}},"outputs":{"or":{"type":"boolean"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\",\"b\"]"},"prototype":"flow/Syncer"},"or":{"coordinates":[0,0],"description":"","params":{},"prototype":"boolean/Or/_"}},"connections":{"sync a & b":{"synced":{"or":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"or":{"or":{"or":{}}}}}}}},"boolean/Or/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":boolean,\"b\":boolean}"}},"outputs":{"or":{"type":"boolean"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"outputs.or(data.a || data.b, tag);"}}}},"boolean/Parser":{"description":"Determines whether the input is truthy or falsy.","interface":{"inputs":{"string":{"type":"any"}},"outputs":{"boolean":{"type":"boolean"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"string":"outputs.boolean(!!data, tag);"}}}},"boolean/Type tester":{"description":"Tells whether the input is a boolean.","interface":{"inputs":{"data":{"type":"any"}},"outputs":{"is boolean":{"type":"is boolean"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data":"outputs[\"is boolean\"](typeof data === \"boolean\", tag);"}}}},"data/array/Builder":{"description":"Builds an array of identical items.","interface":{"inputs":{"item":{"type":"any"},"count":{"type":"number"}},"outputs":{"array":{"type":"typeof(item)[]"}}},"implementations":{"cranq":{"nodes":{"sync item & count":{"coordinates":[0,0],"description":"","params":{"fields":"[\"item\",\"count\"]"},"prototype":"flow/Syncer"},"build":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/array/Builder/_"}},"connections":{"sync item & count":{"synced":{"build":{"item & count":{"description":""}}}}},"forwards":{"inputs":{"item":{"sync item & count":{"item":{}}},"count":{"sync item & count":{"count":{}}}},"outputs":{"array":{"build":{"array":{}}}}}}}},"data/array/Builder/_":{"description":"","interface":{"inputs":{"item & count":{"type":"{\"item\":any,\"count\":number}"}},"outputs":{"array":{"type":"typeof(item & count)[\"item\"]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"item & count":"const {item, count} = data;\nconst result = [];\nresult.length = count;\nfor (let i=0; i<count; i++)\n  result[i] = item;\noutputs.array(result, tag);"}}}},"data/array/Concatenator":{"description":"Concatenates two arrays.","interface":{"inputs":{"a":{"type":"any[]"},"b":{"type":"any[]"}},"outputs":{"concatenated":{"type":"(typeof(a)[number] or typeof(b)[number])[]"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\",\"b\"]"},"prototype":"flow/Syncer"},"concat":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/array/Concatenator/_"}},"connections":{"sync a & b":{"synced":{"concat":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"concatenated":{"concat":{"concatenated":{}}}}}}}},"data/array/Concatenator/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":any[],\"b\":any[]}"}},"outputs":{"concatenated":{"type":"(typeof(a & b)[\"a\"][number] or typeof(a & b)[\"a\"][number])[]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"outputs.concatenated([...data.a, ...data.b], tag);"}}}},"data/array/Emptiness tester":{"description":"Tests whether array is empty.","interface":{"inputs":{"array":{"type":"any[]"}},"outputs":{"empty":{"type":"boolean"}}},"implementations":{"cranq":{"nodes":{"get length":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/array/Length getter"},"zero":{"coordinates":[0,0],"description":"","params":{"data":"0"},"prototype":"data/Store"},"is equal":{"coordinates":[0,0],"description":"","params":{},"prototype":"number/Equality tester"}},"connections":{"get length":{"length":{"zero":{"read":{"description":""}},"is equal":{"a":{"description":""}}}},"zero":{"data":{"is equal":{"b":{"description":""}}}}},"forwards":{"inputs":{"array":{"get length":{"array":{}}}},"outputs":{"empty":{"is equal":{"equal":{}}}}}}}},"data/array/Filter":{"description":"Filters array. External node(s) receive each item and decide whether to include them in the result.","interface":{"inputs":{"array":{"description":"Array to be filtered","type":"any[]"},"include item":{"description":"Whether to include the current (by tag) item.","type":"boolean"}},"outputs":{"filtered":{"description":"The filtered array","type":"typeof(array)"},"item":{"description":"The current item","type":"typeof(array)[number]"}}},"implementations":{"cranq":{"nodes":{"sync index & include item":{"coordinates":[0,0],"description":"","params":{"fields":"[\"index\",\"include item\"]"},"prototype":"flow/Syncer"},"filter":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/array/Filter/_"}},"connections":{"sync index & include item":{"synced":{"filter":{"index & include item":{"description":""}}}},"filter":{"index":{"sync index & include item":{"index":{"description":""}}}}},"forwards":{"inputs":{"array":{"filter":{"array":{}}},"include item":{"sync index & include item":{"include item":{}}}},"outputs":{"filtered":{"filter":{"filtered":{}}},"item":{"filter":{"item":{}}}}}}}},"data/array/Filter/_":{"description":"","interface":{"inputs":{"array":{"type":"any[]"},"index & include item":{"type":"{\"index\":number,\"include item\":boolean}"}},"outputs":{"filtered":{"type":"typeof(array)"},"index":{"type":"number"},"item":{"type":"typeof(array)[number]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"state.filteringsByTag = state.filteringsByTag || new Map();","inputFunctions":{"array":"const {length} = data;\nif (length) {\n  state.filteringsByTag.set(tag, {\n    array: data,\n    result: [],\n    cursor: 0,\n    length\n  });\n  for (let i=0; i<length; i++) {\n    const itemTag = `${tag}:${i}`;\n    outputs.item(data[i], itemTag);\n    outputs.index(i, itemTag);\n  }\n} else {\n  outputs.filtered([], tag);\n}","index & include item":"const filteringTag = tag.substr(0, tag.lastIndexOf(\":\"));\nconst filtering = state.filteringsByTag.get(filteringTag);\nconst {result} = filtering;\nresult[data.index] = data[\"include item\"];\nif (++filtering.cursor === filtering.length) {\n  state.filteringsByTag.delete(filteringTag);\n  const {length, array} = filtering;\n  outputs.filtered(array.filter((v, i)=>result[i]), filteringTag);\n}"}}}},"data/array/First item getter":{"description":"Retrieves first item of the array.","interface":{"inputs":{"array":{"description":"Array to retrieve first item from","type":"any[]"}},"outputs":{"item":{"description":"First item of the array","type":"typeof(array)[number]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"array":"outputs.item(data[0], tag);"}}}},"data/array/Item deleter":{"description":"Deletes item from the array at the specified index.","interface":{"inputs":{"array":{"description":"Array to delete item from","type":"any[]"},"index":{"description":"Identifies item to be deleted","type":"number"}},"outputs":{"array":{"description":"Array with specified item deleted","type":"typeof(array)"}}},"implementations":{"cranq":{"nodes":{"sync array & index":{"coordinates":[0,0],"description":"","params":{"fields":"[\"array\",\"index\"]"},"prototype":"flow/Syncer"},"delete":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/array/Item deleter/_"}},"connections":{"sync array & index":{"synced":{"delete":{"array & index":{"description":""}}}}},"forwards":{"inputs":{"array":{"sync array & index":{"array":{}}},"index":{"sync array & index":{"index":{}}}},"outputs":{"array":{"delete":{"array":{}}}}}}}},"data/array/Item deleter/_":{"description":"","interface":{"inputs":{"array & index":{"type":"{\"array\":any[],\"index\":number}"}},"outputs":{"array":{"type":"typeof(array & index)[\"array\"]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"array & index":"const {array, index} = data;\noutputs.array([\n  ...array.slice(0, index),\n  ...array.slice(index + 1)\n], tag);"}}}},"data/array/Item getter":{"description":"Retrieves item from the specified index.","interface":{"inputs":{"array":{"description":"Array to retrieve item from","type":"any[]"},"index":{"description":"Identifies item to be retrieved in the array.","type":"number"}},"outputs":{"item":{"description":"Item at the specified index.","type":"typeof(array)[number]"}}},"implementations":{"cranq":{"nodes":{"sync array & index":{"coordinates":[0,0],"description":"","params":{"fields":"[\"array\",\"index\"]"},"prototype":"flow/Syncer"},"get item":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/array/Item getter/_"}},"connections":{"sync array & index":{"synced":{"get item":{"array & index":{"description":""}}}}},"forwards":{"inputs":{"array":{"sync array & index":{"array":{}}},"index":{"sync array & index":{"index":{}}}},"outputs":{"item":{"get item":{"item":{}}}}}}}},"data/array/Item getter/_":{"description":"","interface":{"inputs":{"array & index":{"type":"{\"array\":any[],\"index\":number}"}},"outputs":{"item":{"type":"typeof(array & index)[\"array\"][number]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"array & index":"outputs.item(data.array[data.index], tag);"}}}},"data/array/Item inserter":{"description":"Inserts item into the array at the specified index.","interface":{"inputs":{"array":{"description":"Array to insert into","type":"any[]"},"index":{"description":"Index at which to insert","type":"number"},"item":{"description":"Item to be inserted","type":"typeof(array)[number]"}},"outputs":{"array":{"description":"Array with specified item inserted","type":"typeof(array)"}}},"implementations":{"cranq":{"nodes":{"sync inputs":{"coordinates":[-55,63],"description":"","params":{"fields":"[\"array\",\"index\",\"item\"]"},"prototype":"flow/Syncer"},"insert":{"coordinates":[43,-51],"description":"","params":{},"prototype":"data/array/Item inserter/_"}},"connections":{"sync inputs":{"synced":{"insert":{"array & item & index":{"description":""}}}}},"forwards":{"inputs":{"array":{"sync inputs":{"array":{}}},"index":{"sync inputs":{"index":{}}},"item":{"sync inputs":{"item":{}}}},"outputs":{"array":{"insert":{"array":{}}}}}}}},"data/array/Item inserter/_":{"description":"","interface":{"inputs":{"array & item & index":{"type":"{\"array\":any[],\"index\":number,\"item\":any}"}},"outputs":{"array":{"type":"typeof(array & item & index)[\"array\"]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"array & item & index":"const {array, index, item} = data;\noutputs.array([\n  ...array.slice(0, index),\n  item,\n  ...array.slice(index)\n], tag);"}}}},"data/array/Iterator":{"description":"Iterates through items of an array.","interface":{"inputs":{"array":{"description":"Array to be iterated over","type":"any"}},"outputs":{"item":{"description":"Current item","type":"typeof(array)[number]"},"index":{"description":"Current index","type":"number"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"array":"for (let i=0, length=data.length; i<length; i++) {\n  const itemTag = `${tag}:${i}`;\n  outputs.index(i, itemTag);\n  outputs.item(data[i], itemTag);\n}"}}}},"data/array/JSON parser":{"description":"Parses a JSON array","interface":{"inputs":{"json":{"type":"string"}},"outputs":{"parsed":{"type":"any[]"},"bounced":{"type":"string"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"json":"try {\n  const parsed = JSON.parse(data);\n  if (parsed instanceof Array) {\n    outputs.parsed(parsed, tag);\n  } else {\n    outputs.bounced(data, tag);\n  }\n} catch (error) {\n  outputs.bounced(data, tag);\n}"}}}},"data/array/Last item getter":{"description":"Retrieves last item of the array.","interface":{"inputs":{"array":{"description":"Array to retrieve last item from","type":"any[]"}},"outputs":{"item":{"description":"Last item of the array","type":"typeof(array)[number]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"array":"outputs.item(data[data.length-1], tag);"}}}},"data/array/Length getter":{"description":"Determines the length of the input array.","interface":{"inputs":{"array":{"type":"any[]"}},"outputs":{"length":{"type":"number"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"array":"outputs.length(data.length, tag);"}}}},"data/array/Mapper":{"description":"Maps array. External node(s) receive each item and send back a mapped item.","interface":{"inputs":{"array":{"description":"Array to be mapped","type":"any[]"},"mapped item":{"description":"The current (by tag) item, mapped.","type":"any"}},"outputs":{"mapped":{"description":"The mapped array","type":"typeof(mapped item)[]"},"item":{"description":"The current item","type":"typeof(array)[number]"}}},"implementations":{"cranq":{"nodes":{"sync index & mapped item":{"coordinates":[0,0],"description":"","params":{"fields":"[\"index\",\"mapped item\"]"},"prototype":"flow/Syncer"},"map":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/array/Mapper/_"}},"connections":{"sync index & mapped item":{"synced":{"map":{"index & mapped item":{"description":""}}}},"map":{"index":{"sync index & mapped item":{"index":{"description":""}}}}},"forwards":{"inputs":{"array":{"map":{"array":{}}},"mapped item":{"sync index & mapped item":{"mapped item":{}}}},"outputs":{"mapped":{"map":{"mapped":{}}},"item":{"map":{"item":{}}}}}}}},"data/array/Mapper/_":{"description":"","interface":{"inputs":{"array":{"type":"any[]"},"index & mapped item":{"type":"{\"index\":number,\"mapped item\":any}"}},"outputs":{"mapped":{"type":"typeof(index & mapped item)[\"mapped item\"][]"},"index":{"type":"number"},"item":{"type":"typeof(array)[number]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"state.mappingsByTag = state.mappingsByTag || new Map();","inputFunctions":{"array":"const {length} = data;\nif (length) {\n  state.mappingsByTag.set(tag, {\n    result: [],\n    cursor: 0,\n    length\n  });\n  for (let i=0; i<length; i++) {\n    const itemTag = `${tag}:${i}`;\n    outputs.item(data[i], itemTag);\n    outputs.index(i, itemTag);\n  }\n} else {\n  outputs.mapped([], tag);\n}","index & mapped item":"const mappingTag = tag.substr(0, tag.lastIndexOf(\":\"));\nconst mapping = state.mappingsByTag.get(mappingTag);\nconst {result} = mapping;\nresult[data.index] = data[\"mapped item\"];\nif (++mapping.cursor === mapping.length) {\n  state.mappingsByTag.delete(mappingTag);\n  outputs.mapped(result, mappingTag);\n}"}}}},"data/array/Reducer":{"description":"Reduces array. External node(s) receive the partial result and each item and send back a new partial result.","interface":{"inputs":{"array":{"description":"Array to be reduced","type":"any[]"},"initial":{"description":"Initial value for the reduced array","type":"any"},"part reduced":{"description":"Reduced array before the current (by tag) item.","type":"typeof(initial)"}},"outputs":{"reduced":{"description":"The reduced array","type":"typeof(initial)"},"item":{"description":"The current item","type":"typeof(array)[number]"},"part reduced":{"description":"Reduced array after the current (by tag) item.","type":"typeof(initial)"}}},"implementations":{"cranq":{"nodes":{"sync array & initial":{"coordinates":[0,0],"description":"","params":{"fields":"[\"array\",\"initial\"]"},"prototype":"flow/Syncer"},"reduce":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/array/Reducer/_"}},"connections":{"sync array & initial":{"synced":{"reduce":{"array & initial":{"description":""}}}}},"forwards":{"inputs":{"part reduced":{"reduce":{"part reduced":{}}},"array":{"sync array & initial":{"array":{}}},"initial":{"sync array & initial":{"initial":{}}}},"outputs":{"reduced":{"reduce":{"reduced":{}}},"item":{"reduce":{"item":{}}},"part reduced":{"reduce":{"part reduced":{}}}}}}}},"data/array/Reducer/_":{"description":"","interface":{"inputs":{"array & initial":{"type":"{\"array\":any[],\"initial\":any}"},"part reduced":{"type":"typeof(array & initial)[\"initial\"]"}},"outputs":{"reduced":{"type":"typeof(array & initial)[\"initial\"]"},"item":{"type":"typeof(array & initial)[\"array\"][number]"},"part reduced":{"type":"typeof(array & initial)[\"initial\"]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"state.reductionsByTag = state.reductionsByTag || new Map();\nstate.copy = (value) => (value instanceof Array)\n    ? [...value] : (value instanceof Object)\n      ? {...value} : value;","inputFunctions":{"array & initial":"const {array, initial} = data;\nconst {length} = array;\nconst result = state.copy(initial);\nif (length) {\n  state.reductionsByTag.set(tag, {\n    result,\n    cursor: 0,\n    length\n  });\n  outputs[\"part reduced\"](result, `${tag}:0`);\n  for (let i=0; i<length; i++) {\n    const itemTag = `${tag}:${i}`;\n    outputs.item(array[i], itemTag);\n  }\n} else {\n  outputs.reduced(result, tag);\n}","part reduced":"const reductionTag = tag.substr(0, tag.lastIndexOf(\":\"));\nconst reduction = state.reductionsByTag.get(reductionTag);\nif (++reduction.cursor === reduction.length) {\n  // Reduction finished\n  state.reductionsByTag.delete(reductionTag);\n  outputs.reduced(data, reductionTag);\n} else {\n  reduction.result = data;\n  outputs[\"part reduced\"](data, `${reductionTag}:${reduction.cursor}`);\n}"}}}},"data/array/Repeater":{"description":"Repeats the input data for each item in the array.","interface":{"inputs":{"array":{"description":"Specifies number of times to repeat data.","type":"any[]"},"data":{"description":"Data to be repeated","type":"any"}},"outputs":{"data":{"description":"Repeated data","type":"typeof(data)"}}},"implementations":{"cranq":{"nodes":{"count items":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/array/Length getter"},"repeat data":{"coordinates":[0,0],"description":"","params":{},"prototype":"flow/Repeater"}},"connections":{"count items":{"length":{"repeat data":{"count":{"description":""}}}}},"forwards":{"inputs":{"array":{"count items":{"array":{}}},"data":{"repeat data":{"data":{}}}},"outputs":{"data":{"repeat data":{"data":{}}}}}}}},"data/array/Slicer":{"description":"Slices a section out of an array.","interface":{"inputs":{"array":{"description":"Array to slice out of","type":"any[]"},"from":{"description":"Start position of the slice (included)","type":"number"},"to":{"description":"End position of the slice (not included)","type":"number"}},"outputs":{"slice":{"description":"Section sliced out of the input array","type":"typeof(array)"}}},"implementations":{"cranq":{"nodes":{"sync array & from & to":{"coordinates":[0,0],"description":"","params":{"fields":"[\"array\",\"from\",\"to\"]"},"prototype":"flow/Syncer"},"slice":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/array/Slicer/_"}},"connections":{"sync array & from & to":{"synced":{"slice":{"array & from & to":{"description":""}}}}},"forwards":{"inputs":{"array":{"sync array & from & to":{"array":{}}},"from":{"sync array & from & to":{"from":{}}},"to":{"sync array & from & to":{"to":{}}}},"outputs":{"slice":{"slice":{"slice":{}}}}}}}},"data/array/Slicer/_":{"description":"","interface":{"inputs":{"array & from & to":{"type":"{\"array\":any[],\"from\":number,\"to\":number}"}},"outputs":{"slice":{"type":"typeof(array & from & to)[\"array\"]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"array & from & to":"const {array, from, to} = data;\noutputs.slice(array.slice(from, to), tag);"}}}},"data/array/Type tester":{"description":"Tells whether the input is an array.","interface":{"inputs":{"data":{"type":"any"}},"outputs":{"is array":{"type":"is any[]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data":"outputs[\"is array\"](data instanceof Array, tag);"}}}},"data/dictionary/Builder/key-value pairs":{"description":"Builds dictionary based on an array of objects with key&value properties.","interface":{"inputs":{"key-value pairs":{"type":"{\"key\":string,\"value\":any}[]"}},"outputs":{"dict":{"type":"{string:typeof(key-value pairs)[number][\"value\"]}"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"key-value pairs":"const result = {};\nfor (const item of data)\n  result[item.key] = item.value;\noutputs.dict(result, tag);"}}}},"data/dictionary/Builder/keys & value":{"description":"Builds dictionary based on an array of keys and a single value for all items.","interface":{"inputs":{"keys":{"type":"string[]"},"value":{"type":"any"}},"outputs":{"dict":{"type":"{string:typeof(value)}"}}},"implementations":{"cranq":{"nodes":{"forward inputs":{"coordinates":[0,0],"description":"","params":{},"prototype":"flow/Forwarder/double"},"count keys":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/array/Length getter"},"create values":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/array/Builder"},"build dict":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/dictionary/Builder/keys & values"}},"connections":{"forward inputs":{"1":{"count keys":{"array":{"description":""}},"build dict":{"keys":{"description":""}}},"2":{"create values":{"item":{"description":""}}}},"count keys":{"length":{"create values":{"count":{"description":""}}}},"create values":{"array":{"build dict":{"values":{"description":""}}}}},"forwards":{"inputs":{"keys":{"forward inputs":{"1":{}}},"value":{"forward inputs":{"2":{}}}},"outputs":{"dict":{"build dict":{"dict":{}}}}}}}},"data/dictionary/Builder/keys & values":{"description":"Builds a dictionary based on matching arrays of keys and values.","interface":{"inputs":{"keys":{"type":"string[]"},"values":{"type":"any[]"}},"outputs":{"dict":{"type":"{string:typeof(values)[number]}"}}},"implementations":{"cranq":{"nodes":{"sync keys & values":{"coordinates":[0,0],"description":"","params":{"fields":"[\"keys\",\"values\"]"},"prototype":"flow/Syncer"},"build dict":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/dictionary/Builder/keys & values/_"}},"connections":{"sync keys & values":{"synced":{"build dict":{"keys & values":{"description":""}}}}},"forwards":{"inputs":{"keys":{"sync keys & values":{"keys":{}}},"values":{"sync keys & values":{"values":{}}}},"outputs":{"dict":{"build dict":{"dict":{}}}}}}}},"data/dictionary/Builder/keys & values/_":{"description":"","interface":{"inputs":{"keys & values":{"type":"{\"keys\":string[],\"values\":any[]}"}},"outputs":{"dict":{"type":"{string:typeof(keys & values)[\"values\"][number]}"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"keys & values":"const result = {};\nconst {keys, values} = data;\nfor (let i=0, length=Math.min(keys.length, values.length); i<length; i++)\n  result[keys[i]] = values[i];\noutputs.dict(result, tag);"}}}},"data/dictionary/Item getter":{"description":"Retrieves an item's value from the dictionary.","interface":{"inputs":{"dict":{"type":"{string:any}"},"key":{"type":"string"}},"outputs":{"value":{"type":"typeof(dict)[string]"}}},"implementations":{"cranq":{"nodes":{"sync dict & key":{"coordinates":[0,0],"description":"","params":{"fields":"[\"dict\",\"key\"]"},"prototype":"flow/Syncer"},"get item":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/dictionary/Item getter/_"}},"connections":{"sync dict & key":{"synced":{"get item":{"dict & key":{"description":""}}}}},"forwards":{"inputs":{"dict":{"sync dict & key":{"dict":{}}},"key":{"sync dict & key":{"key":{}}}},"outputs":{"value":{"get item":{"value":{}}}}}}}},"data/dictionary/Item getter/_":{"description":"","interface":{"inputs":{"dict & key":{"type":"{\"dict\":{string:any},\"key\":string}"}},"outputs":{"value":{"type":"typeof(dict & key)[\"dict\"][string]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"dict & key":"outputs.value(data.dict[data.key], tag);"}}}},"data/dictionary/Item setter":{"description":"Sets an item in the dictionary.","interface":{"inputs":{"dict":{"type":"{string:any}"},"key":{"type":"string"},"value":{"type":"typeof(dict)[string]"}},"outputs":{"dict":{"type":"typeof(dict)"}}},"implementations":{"cranq":{"nodes":{"sync inputs":{"coordinates":[0,0],"description":"","params":{"fields":"[\"dict\",\"key\",\"value\"]"},"prototype":"flow/Syncer"},"set item":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/dictionary/Item setter/_"}},"connections":{"sync inputs":{"synced":{"set item":{"dict & key & value":{"description":""}}}}},"forwards":{"inputs":{"dict":{"sync inputs":{"dict":{}}},"key":{"sync inputs":{"key":{}}},"value":{"sync inputs":{"value":{}}}},"outputs":{"dict":{"set item":{"dict":{}}}}}}}},"data/dictionary/Item setter/_":{"description":"","interface":{"inputs":{"dict & key & value":{"type":"{\"dict\":{string:any},\"key\":string,\"value\":any}"}},"outputs":{"dict":{"type":"typeof(dict & key & value)[\"dict\"]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"dict & key & value":"outputs.dict({...data.dict, [data.key]:data.value}, tag);"}}}},"data/dictionary/Items getter":{"description":"Retrieves multiple items' values from the dictionary, in the order of the keys provided.","interface":{"inputs":{"dict":{"type":"{string:any}"},"keys":{"type":"string[]"}},"outputs":{"values":{"type":"typeof(dict)[string][]"}}},"implementations":{"cranq":{"nodes":{"sync dict & keys":{"coordinates":[0,0],"description":"","params":{"fields":"[\"dict\",\"keys\"]"},"prototype":"flow/Syncer"},"get items":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/dictionary/Items getter/_"}},"connections":{"sync dict & keys":{"synced":{"get items":{"dict & keys":{"description":""}}}}},"forwards":{"inputs":{"dict":{"sync dict & keys":{"dict":{}}},"keys":{"sync dict & keys":{"keys":{}}}},"outputs":{"values":{"get items":{"values":{}}}}}}}},"data/dictionary/Items getter/_":{"description":"","interface":{"inputs":{"dict & keys":{"type":"{\"dict\":{string:any},\"keys\":string[]}"}},"outputs":{"values":{"type":"typeof(dict & key)[\"dict\"][string][]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"dict & keys":"const {dict, keys} = data;\noutputs.values(keys.map(key => dict[key]), tag);"}}}},"data/dictionary/Iterator":{"description":"Iterates through items of a dictionary.","interface":{"inputs":{"dict":{"type":"{string:any}"}},"outputs":{"value":{"type":"typeof(dict)[string]"},"key":{"type":"string"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"dict":"const keys = Object.keys(data);\nfor (let i=0, length=keys.length; i < length; i++) {\n  const key = keys[i];\n  const itemTag = `${tag}:${i}`;\n  outputs.key(key, itemTag);\n  outputs.value(data[key], itemTag);\n}"}}}},"data/dictionary/JSON parser":{"description":"Parses a JSON dictionary","interface":{"inputs":{"json":{"type":"string"}},"outputs":{"parsed":{"type":"{string:any}"},"bounced":{"type":"string"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"json":"try {\n  const parsed = JSON.parse(data);\n  if (!(parsed instanceof Array) && parsed instanceof Object) {\n    outputs.parsed(parsed, tag);\n  } else {\n    outputs.bounced(data, tag);\n  }\n} catch (error) {\n  outputs.bounced(data, tag);\n}"}}}},"data/dictionary/JSON serializer":{"description":"","interface":{"inputs":{"dict":{"description":"","type":"any"}},"outputs":{"json":{"description":"","type":"any"}}},"implementations":{"target":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{}},"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"dict":"outputs.json(JSON.stringify(data), tag);"}}}},"data/dictionary/Keys getter":{"description":"Gets keys from the dictionary as an array.","interface":{"inputs":{"dict":{"type":"{string:any}"}},"outputs":{"keys":{"type":"string[]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"dict":"outputs.keys(Object.keys(data), tag);"}}}},"data/dictionary/Key-value pairs getter":{"description":"Gets key-value pairs from the dictionary as an array.","interface":{"inputs":{"dict":{"type":"{string:any}"}},"outputs":{"key-value pairs":{"type":"{\"key\":string,\"value\":typeof(dict)[string]}[]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"dict":"outputs[\"key-value pairs\"](Object.keys(data).map(key => ({key, value:data[key]})), tag);"}}}},"data/dictionary/Left joiner":{"description":"Joins dictionary 'b' to dictionary 'a', by matching the values of 'a' to the keys of 'b'.","interface":{"inputs":{"a":{"type":"{string:string}"},"b":{"type":"{string:any}"}},"outputs":{"joined":{"type":"{string:typeof(b)[string]}"}}},"implementations":{"cranq":{"nodes":{"forward inputs":{"coordinates":[0,0],"description":"","params":{},"prototype":"flow/Forwarder/double"},"get keys of 'a'":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/dictionary/Keys getter"},"get values of 'a'":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/dictionary/Values getter"},"get joined values":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/dictionary/Items getter"},"build joined":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/dictionary/Builder/keys & values"}},"connections":{"forward inputs":{"1":{"get keys of 'a'":{"dict":{"description":""}},"get values of 'a'":{"dict":{"description":""}}},"2":{"get joined values":{"dict":{"description":""}}}},"get keys of 'a'":{"keys":{"build joined":{"keys":{"description":""}}}},"get values of 'a'":{"values":{"get joined values":{"keys":{"description":""}}}},"get joined values":{"values":{"build joined":{"values":{"description":""}}}}},"forwards":{"inputs":{"a":{"forward inputs":{"1":{}}},"b":{"forward inputs":{"2":{}}}},"outputs":{"joined":{"build joined":{"dict":{}}}}}}}},"data/dictionary/Merger":{"description":"Merges dictionary 'b' to dictionary 'a'. Values of 'a' will be ignored on conflict.","interface":{"inputs":{"a":{"type":"{string:any}"},"b":{"type":"{string:any}"}},"outputs":{"merged":{"type":"{string:typeof(a)[string] or typeof(b)[string]}"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\",\"b\"]"},"prototype":"flow/Syncer"},"merge":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/dictionary/Merger/_"}},"connections":{"sync a & b":{"synced":{"merge":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"merged":{"merge":{"merged":{}}}}}}}},"data/dictionary/Merger/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":{string:any},\"b\":{string:any}}"}},"outputs":{"merged":{"type":"{string:typeof(a & b)[\"a\"][string] or typeof(a & b)[\"b\"][string]}"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"outputs.merged({...data.a, ...data.b}, tag);"}}}},"data/dictionary/Size getter":{"description":"Gets the number of items in the dictionary.","interface":{"inputs":{"dict":{"type":"{string:any}"}},"outputs":{"size":{"type":"number"}}},"implementations":{"cranq":{"nodes":{"get keys":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/dictionary/Keys getter"},"count items":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/array/Length getter"}},"connections":{"get keys":{"keys":{"count items":{"array":{"description":""}}}}},"forwards":{"inputs":{"dict":{"get keys":{"dict":{}}}},"outputs":{"size":{"count items":{"length":{}}}}}}}},"data/dictionary/Type tester":{"description":"Tells whether the input is a dictionary.","interface":{"inputs":{"data":{"type":"any"}},"outputs":{"is dict":{"type":"boolean"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data":"const isArray = data instanceof Array;\nconst isObject = data instanceof Object;\noutputs[\"is dict\"](!isArray && isObject, tag);"}}}},"data/dictionary/Values getter":{"description":"Gets values from the dictionary as an array.","interface":{"inputs":{"dict":{"type":"{string:any}"}},"outputs":{"values":{"type":"typeof(dict)[string]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"dict":"outputs.values(Object.values(data), tag);"}}}},"data/Sameness tester":{"description":"","interface":{"inputs":{"a":{"description":"","type":"any"},"b":{"description":"","type":"any"}},"outputs":{"same":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"same?":{"coordinates":[16,-58],"description":"","params":{},"prototype":"data/Sameness tester/_"},"Syncer A":{"coordinates":[-8,73],"description":"","params":{"fields":"[\"a\", \"b\"]"},"prototype":"flow/Syncer"}},"connections":{"Syncer A":{"synced":{"same?":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"Syncer A":{"a":{}}},"b":{"Syncer A":{"b":{}}}},"outputs":{"same":{"same?":{"same":{}}}}}}}},"data/Sameness tester/_":{"description":"","interface":{"inputs":{"a & b":{"description":"","type":"any"}},"outputs":{"same":{"description":"","type":"any"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"outputs.same(data.a === data.b, tag);"}}}},"data/Store":{"description":"Stores data and sends it on input to (send).","interface":{"inputs":{"data":{"type":"any"},"read":{"type":"any"}},"outputs":{"data":{"type":"any"},"written":{"type":"null"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data":"state.data = data;\noutputs.written(null, tag);","read":"outputs.data(state.data || params.data, tag);"}}}},"data/tree/Node getter":{"description":"Retrieves the node at the specified path of the tree.","interface":{"inputs":{"tree":{"type":"any[] or {string:any}"},"path":{"type":"(string | number)[]"}},"outputs":{"node":{"type":"any"}}},"implementations":{"cranq":{"nodes":{"sync tree & path":{"coordinates":[0,0],"description":"","params":{"fields":"[\"tree\",\"path\"]"},"prototype":"flow/Syncer"},"get node":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/tree/Node getter/_"}},"connections":{"sync tree & path":{"synced":{"get node":{"tree & path":{"description":""}}}}},"forwards":{"inputs":{"tree":{"sync tree & path":{"tree":{}}},"path":{"sync tree & path":{"path":{}}}},"outputs":{"node":{"get node":{"node":{}}}}}}}},"data/tree/Node getter/_":{"description":"","interface":{"inputs":{"tree & path":{"type":"{\"tree\":any[] or {string:any},\"path\":(string | number)[]}"}},"outputs":{"node":{"type":"any"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"tree & path":"const {tree, path} = data;\nlet node = tree;\nfor (let i=0, length=path.length; i<length; i++) {\n  if (node instanceof Object) {\n    node = node[path[i]];\n  } else {\n    node = undefined;\n    break;\n  }\n}\noutputs.node(node, tag);"}}}},"data/tree/Node setter/mutable":{"description":"Sets a node at the specified path of the tree. Mutates input.","interface":{"inputs":{"tree":{"type":"any[] or {string:any}"},"path":{"type":"(string | number)[]"},"node":{"type":"any"}},"outputs":{"written":{"type":"null"}}},"implementations":{"cranq":{"nodes":{"sync tree & path & node":{"coordinates":[0,0],"description":"","params":{"fields":"[\"tree\",\"path\",\"node\"]"},"prototype":"flow/Syncer"},"set node":{"coordinates":[0,0],"description":"","params":{},"prototype":"data/tree/Node setter/mutable/_"}},"connections":{"sync tree & path & node":{"synced":{"set node":{"tree & path & node":{"description":""}}}}},"forwards":{"inputs":{"tree":{"sync tree & path & node":{"tree":{}}},"path":{"sync tree & path & node":{"path":{}}},"node":{"sync tree & path & node":{"node":{}}}},"outputs":{"written":{"set node":{"written":{}}}}}}}},"data/tree/Node setter/mutable/_":{"description":"","interface":{"inputs":{"tree & path & node":{"type":"{\"tree\":any[] or {string:any},\"path\":(string | number)[],\"node\":any}"}},"outputs":{"written":{"type":"null"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"tree & path & node":"const {tree, path} = data;\nconst length = path.length - 1;\nlet parent = tree;\nfor (let i=0; i<length; i++) {\n  const key = path[i];\n  let node = parent[key];\n  if (node instanceof Object) {\n    parent = node;\n  } else {\n    // looking ahead to determine parent type\n    switch (typeof path[i + 1]) {\n    case \"string\":\n      node = {};\n      break;\n    case \"number\":\n      node = [];\n      break;\n    }\n    parent[key] = node;\n    parent = node;\n  }\n}\nconst lastPathComponent = path[length];\nparent[lastPathComponent] = data.node;\noutputs.written(null, tag);"}}}},"date/Current date getter/utc":{"description":"","interface":{"inputs":{"read":{"description":"","type":"any"}},"outputs":{"date":{"description":"","type":"any"}}},"implementations":{"target":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{}},"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"read":"outputs.date(new Date().toISOString(), tag);"}}}},"debug/Data logger":{"description":"","interface":{"inputs":{"data":{"description":"","type":"any"}},"outputs":{}},"implementations":{"cranq":{"nodes":{"log":{"coordinates":[24,81],"description":"","params":{},"prototype":"debug/Logger"},"serialize":{"coordinates":[-21,-63],"description":"","params":{"pretty":"true"},"prototype":"json/Serializer"}},"connections":{"serialize":{"json":{"log":{"data":{"description":""}}}}},"forwards":{"inputs":{"data":{"serialize":{"data":{}}}},"outputs":{}}}}},"debug/Logger":{"description":"Logs input signal to standard logging output.","interface":{"inputs":{"data":{"type":"any"}},"outputs":{}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data":"console.log(`${data} @${tag}`);"}}}},"flow/Aggregator":{"description":"Aggregates inputs into an array until released.","interface":{"inputs":{"data":{"description":"Receives data to be aggregated","type":"any"},"release":{"description":"Receives flag whether to release aggregated inputs.","type":"boolean"}},"outputs":{"aggregated":{"type":"typeof(data)[]"}}},"implementations":{"cranq":{"nodes":{"forward data":{"coordinates":[0,0],"description":"","params":{},"prototype":"flow/Forwarder"},"queue release":{"coordinates":[0,0],"description":"","params":{},"prototype":"flow/Queued forwarder"},"sync inputs":{"coordinates":[0,0],"description":"","params":{"fields":"[\"data\",\"release\"]"},"prototype":"flow/Syncer"},"aggregate synced":{"coordinates":[0,0],"description":"","params":{},"prototype":"flow/Aggregator/_"}},"connections":{"forward data":{"data":{"queue release":{"reference":{"description":""}},"sync inputs":{"data":{"description":""}}}},"sync inputs":{"synced":{"aggregate synced":{"data & release":{"description":""}}}},"queue release":{"data":{"sync inputs":{"release":{"description":""}}}}},"forwards":{"inputs":{"data":{"forward data":{"data":{}}},"release":{"queue release":{"data":{}}}},"outputs":{"aggregated":{"aggregate synced":{"aggregated":{}}}}}}}},"flow/Aggregator/_":{"description":"","interface":{"inputs":{"data & release":{"type":"{\"data\":any,\"released\":boolean}"}},"outputs":{"aggregated":{"type":"typeof(data & release)[\"data\"][]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"state.aggregated = state.aggregated || [];","inputFunctions":{"data & release":"const {data:item, release} = data;state.aggregated.push(item);\nif (release) {\n  outputs.aggregated(state.aggregated, tag);\n  state.aggregated = [];\n}"}}}},"flow/Debouncer":{"description":"","interface":{"inputs":{"data":{"description":"","type":"any"},"delay":{"description":"","type":"any"}},"outputs":{"data":{"description":"","type":"any"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data":"const {timer} = state;\nif (timer)\n  clearTimeout(timer);\nstate.timer = setTimeout(() => outputs.data(data, tag), params.delay);"}}}},"flow/Delayer":{"description":"Delays the input by the specified amount of time.","interface":{"inputs":{"data":{"type":"any"},"delay":{"type":"number"}},"outputs":{"data":{"type":"typeof(data)"}}},"implementations":{"cranq":{"nodes":{"sync data & delay":{"coordinates":[0,0],"description":"","params":{"fields":"[\"data\",\"delay\"]"},"prototype":"flow/Syncer"},"delay":{"coordinates":[0,0],"description":"","params":{},"prototype":"flow/Delayer/_"}},"connections":{"sync data & delay":{"synced":{"delay":{"data & delay":{"description":""}}}}},"forwards":{"inputs":{"data":{"sync data & delay":{"data":{}}},"delay":{"sync data & delay":{"delay":{}}}},"outputs":{"data":{"delay":{"data":{}}}}}}}},"flow/Delayer/_":{"description":"","interface":{"inputs":{"data & delay":{"type":"{\"data\":any,\"delay\":number}"}},"outputs":{"data":{"type":"typeof(data)"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data & delay":"setTimeout(()=>outputs.data(data.data, tag), data.delay);"}}}},"flow/Demultiplexer":{"description":"Forwards the payload of an incoming multiplexed signal to the corresponding output.","interface":{"inputs":{"fields":{"description":"Receives a list of output port names to send payload to.","type":"string[]"},"multiplexed":{"description":"Receives multiplexed data.","type":"{\"field\":string,\"data\":any}"}},"outputs":{"demultiplexed":{"description":"Sends demultiplexed payload data.","paramId":"fields","type":"(multiplexed)[\"data\"]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"multiplexed":"outputs[data.field](data.data, tag);"}}}},"flow/Fork":{"description":"Forwards input data to one of two outputs, depending on the condition.","interface":{"inputs":{"data":{"description":"Receives the data to be forwarded to either output.","type":"any"},"condition":{"description":"Receives the evaluation of some condition.","type":"boolean"}},"outputs":{"true":{"description":"Sends the input when condition was true.","type":"typeof(data)"},"false":{"description":"Sends the input when condition was false.","type":"typeof(data)"}}},"implementations":{"cranq":{"nodes":{"sync data & condition":{"coordinates":[0,0],"description":"","params":{"fields":"[\"data\",\"condition\"]"},"prototype":"flow/Syncer"},"fork":{"coordinates":[0,0],"description":"","params":{},"prototype":"flow/Fork/_"}},"connections":{"sync data & condition":{"synced":{"fork":{"data & condition":{"description":""}}}}},"forwards":{"inputs":{"data":{"sync data & condition":{"data":{}}},"condition":{"sync data & condition":{"condition":{}}}},"outputs":{"true":{"fork":{"true":{}}},"false":{"fork":{"false":{}}}}}}}},"flow/Fork/_":{"description":"","interface":{"inputs":{"data & condition":{"type":"{\"data\":any,\"condition\":boolean}"}},"outputs":{"true":{"type":"typeof(data & condition[\"data\"])"},"false":{"type":"typeof(data & condition[\"data\"])"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data & condition":"if (data.condition)\n  outputs.true(data.data, tag);\nelse\n  outputs.false(data.data, tag);\n"}}}},"flow/Forwarder":{"description":"Sends input (data) to output without change.","interface":{"inputs":{"data":{"description":"Receives data to be forwarded.","type":"any"}},"outputs":{"data":{"description":"Sends forwarded data.","type":"any"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data":"outputs.data(data, tag);"}}}},"flow/Forwarder/double":{"description":"Forwards 2 inputs in the order matching the order of the ports.","interface":{"inputs":{"1":{"type":"any"},"2":{"type":"any"}},"outputs":{"1":{"type":"typeof(1)"},"2":{"type":"typeof(2)"}}},"implementations":{"cranq":{"nodes":{"sync inputs":{"coordinates":[-7,54],"description":"","params":{"fields":"[\"1\",\"2\"]"},"prototype":"flow/Syncer"},"restore in order":{"coordinates":[22,-54],"description":"","params":{"fields":"[\"1\",\"2\"]"},"prototype":"flow/Splitter"}},"connections":{"sync inputs":{"synced":{"restore in order":{"unsplit":{"description":""}}}}},"forwards":{"inputs":{"1":{"sync inputs":{"1":{}}},"2":{"sync inputs":{"2":{}}}},"outputs":{"1":{"restore in order":{"1":{}}},"2":{"restore in order":{"2":{}}}}}}}},"flow/Forwarder/triple":{"description":"Forwards 3 inputs in the order matching the order of the ports.","interface":{"inputs":{"1":{"type":"any"},"2":{"type":"any"},"3":{"type":"any"}},"outputs":{"1":{"type":"typeof(1)"},"2":{"type":"typeof(2)"},"3":{"type":"typeof(3)"}}},"implementations":{"cranq":{"nodes":{"sync inputs":{"coordinates":[0,0],"description":"","params":{"fields":"[\"1\",\"2\",\"3\"]"},"prototype":"flow/Syncer"},"restore in order":{"coordinates":[0,0],"description":"","params":{"fields":"[\"1\",\"2\",\"3\"]"},"prototype":"flow/Splitter"}},"connections":{"sync inputs":{"synced":{"restore in order":{"unsplit":{"description":""}}}}},"forwards":{"inputs":{"1":{"sync inputs":{"1":{}}},"2":{"sync inputs":{"2":{}}},"3":{"sync inputs":{"3":{}}}},"outputs":{"1":{"restore in order":{"1":{}}},"2":{"restore in order":{"2":{}}},"3":{"restore in order":{"3":{}}}}}}}},"flow/Forwarder/quadruple":{"description":"Forwards 4 inputs in the order matching the order of the ports.","interface":{"inputs":{"1":{"type":"any"},"2":{"type":"any"},"3":{"type":"any"},"4":{"type":"any"}},"outputs":{"1":{"type":"typeof(1)"},"2":{"type":"typeof(2)"},"3":{"type":"typeof(3)"},"4":{"type":"typeof(4)"}}},"implementations":{"cranq":{"nodes":{"sync inputs":{"coordinates":[0,0],"description":"","params":{"fields":"[\"1\",\"2\",\"3\",\"4\"]"},"prototype":"flow/Syncer"},"restore in order":{"coordinates":[0,0],"description":"","params":{"fields":"[\"1\",\"2\",\"3\",\"4\"]"},"prototype":"flow/Splitter"}},"connections":{"sync inputs":{"synced":{"restore in order":{"unsplit":{"description":""}}}}},"forwards":{"inputs":{"1":{"sync inputs":{"1":{}}},"2":{"sync inputs":{"2":{}}},"3":{"sync inputs":{"3":{}}},"4":{"sync inputs":{"4":{}}}},"outputs":{"1":{"restore in order":{"1":{}}},"2":{"restore in order":{"2":{}}},"3":{"restore in order":{"3":{}}},"4":{"restore in order":{"4":{}}}}}}}},"flow/Gate":{"description":"","interface":{"inputs":{"data":{"description":"","type":"any"},"open":{"description":"","type":"any"}},"outputs":{"data":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"gate":{"coordinates":[25,-57],"description":"","params":{},"prototype":"flow/Gate/_"},"sync data & open":{"coordinates":[-22,73],"description":"","params":{"fields":"[\"data\", \"open\"]"},"prototype":"flow/Syncer"}},"connections":{"sync data & open":{"synced":{"gate":{"data & open":{"description":""}}}}},"forwards":{"inputs":{"data":{"sync data & open":{"data":{}}},"open":{"sync data & open":{"open":{}}}},"outputs":{"data":{"gate":{"data":{}}}}}}}},"flow/Gate/_":{"description":"","interface":{"inputs":{"data & open":{"description":"","type":"any"}},"outputs":{"data":{"description":"","type":"any"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data & open":"if (data.open) outputs.data(data.data, tag);"}}}},"flow/Multiplexer":{"description":"Associates incoming data with the name of the port they entered through.","interface":{"inputs":{"fields":{"description":"Receives a list of input port names to accept payload from.","type":"string[]"},"demultiplexed":{"description":"Receives payload data for multiplexing.","paramId":"fields","type":"any"}},"outputs":{"multiplexed":{"description":"Sends multiplexed data.","type":"{\"field\":string,\"data\":(demultiplexed)}"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"demultiplexed":"outputs.multiplexed({data, field: input}, tag);"}}}},"flow/Queued forwarder":{"description":"Forwards data input in the order defined by a reference input.","interface":{"inputs":{"data":{"description":"Receives data to be forwarded","type":"any"},"reference":{"description":"Receives signals that define the order of the forwarded signals.","type":"any"}},"outputs":{"data":{"description":"Sends forwarded data","type":"typeof(data)"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"state.dataByTag = state.dataByTag || new Map();\nstate.queue = state.queue || [];\nconst {dataByTag, queue} = state;\nstate.flush = () => {\n  while (dataByTag.has(queue[0])) {\n    const tag = queue.shift();\n    const data = dataByTag.get(tag);\n    dataByTag.delete(tag);\n    outputs.data(data, tag);\n  }\n}","inputFunctions":{"data":"state.dataByTag.set(tag, data);\nstate.flush();","reference":"state.queue.push(tag);\nstate.flush();"}}}},"flow/Repeater":{"description":"Repeats the input the specified amount of times.","interface":{"inputs":{"data":{"description":"Receives data to be repeated.","type":"any"},"count":{"description":"Receives the number of times the input is to be repeated.","type":"number"}},"outputs":{"data":{"description":"Sends the repeated signal.","type":"typeof(data)"}}},"implementations":{"cranq":{"nodes":{"sync data & count":{"coordinates":[0,0],"description":"","params":{"fields":"[\"data\",\"count\"]"},"prototype":"flow/Syncer"},"repeat":{"coordinates":[0,0],"description":"","params":{},"prototype":"flow/Repeater/_"}},"connections":{"sync data & count":{"synced":{"repeat":{"data & count":{"description":""}}}}},"forwards":{"inputs":{"data":{"sync data & count":{"data":{}}},"count":{"sync data & count":{"count":{}}}},"outputs":{"data":{"repeat":{"data":{}}}}}}}},"flow/Repeater/_":{"description":"","interface":{"inputs":{"data & count":{"type":"{\"data\":any,\"count\":number}"}},"outputs":{"data":{"type":"typeof(data & count)[\"data\"]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data & count":"const {count, data:item} = data;\nfor (let i=0; i<count; i++)\n  outputs.data(item, `${tag}:${i}`);\n"}}}},"flow/Splitter":{"description":"Splits bundled signals into individual signals.","interface":{"inputs":{"fields":{"description":"Receives a list of output port names matching the names of individual signals.","type":"string[]"},"unsplit":{"description":"Receives a signal bundle as a dictionary, where keys identify individual signals.","type":"{typeof(fields):any}"}},"outputs":{"split":{"description":"Sends input data split into individual fields.","paramId":"fields","type":"any"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"unsplit":"const fields = params.fields;\nfor (const field of fields)\n  outputs[field](data[field], tag);\n"}}}},"flow/Starter":{"description":"Sends a start signal asynchronously right after the creation of the node.","interface":{"inputs":{},"outputs":{"start":{"description":"Sends signal after the node's been created.","type":"null"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"setTimeout(()=>outputs.start(null, \"start\"), 0);","inputFunctions":{}}}},"flow/Syncer":{"description":"Bundles input signals that have the same tag.","interface":{"inputs":{"fields":{"description":"Receives a list of custom input port names through which the node will receive signals for syncing.","type":"string[]"},"unsynced":{"description":"Receives individual fields for syncing.","paramId":"fields","type":"any"}},"outputs":{"synced":{"description":"Sends synchronized inputs as a dictionary, indexed by field.","type":"{typeof(fields):any}"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"state.dynamicFields = params.fields\n  .filter(field => params[field] === undefined);\nstate.staticBundle = params.fields\n  .filter(field => params[field] !== undefined)\n  .reduce(\n    (result, field) => {result[field] = params[field]; return result},\n    typeof params.fields[0] === \"number\" ? [] : {});\nstate.bundlesByTag = state.bundlesByTag || new Map();\nstate.portsByTag = state.portsByTag || new Map();\nstate.copy = (value) => value instanceof Array\n  ? [...value] : value instanceof Object\n    ? {...value} : value;","inputFunctions":{"unsynced":"const {bundlesByTag, portsByTag} = state;\nlet bundle = bundlesByTag.get(tag);\nif (!bundle) {\n  bundle = state.copy(state.staticBundle);\n  bundlesByTag.set(tag, bundle);\n}\nlet ports = portsByTag.get(tag);\nif (!ports) {\n  ports = new Set(state.dynamicFields);\n  portsByTag.set(tag, ports);\n}\nbundle[input] = data;\nports.delete(input);\nif (ports.size === 0) {\n  bundlesByTag.delete(tag);\n  portsByTag.delete(tag);\n  outputs.synced(bundle, tag);\n}"}}}},"flow/Tag extractor":{"description":"Maps the input signal to the tag associated with it.","interface":{"inputs":{"data":{"type":"any"}},"outputs":{"tag":{"type":"string"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data":"outputs.tag(tag, tag);"}}}},"flow/Tag incrementer":{"description":"Increments the index part of the incoming signal's tag.","interface":{"inputs":{"data":{"type":"any"}},"outputs":{"data":{"type":"typeof(data)"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data":"const matches = /^(.*)\\+(.*?)$/.exec(tag);\nconst nextTag = matches === null\n  ? `${tag}+0`\n  : `${matches[1]}+${+matches[2] + 1}`;\noutputs.data(data, nextTag);\n"}}}},"flow/Tag trimmer":{"description":"Trims the last colon-separated section of the tag of the incoming signal.","interface":{"inputs":{"data":{"type":"any"}},"outputs":{"data":{"type":"typeof(data)"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data":"const matches = /^(.*)[:+].*$/.exec(tag);\noutputs.data(data, matches && matches[1] || tag);\n"}}}},"io/file/Text reader":{"description":"Reads a text file from the specified path and outputs its content.","interface":{"inputs":{"path":{"type":"string"}},"outputs":{"text":{"type":"string"},"bounced":{"type":"string"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"path":"const {readFile} = require(\"fs\");\nreadFile(data, (error, contents)=> {\n  if (error)\n    outputs.bounced(data, tag);\n  else\n    outputs.text(String(contents), tag);\n});"}}}},"io/file/Text writer":{"description":"Writes the input text to the specified path as a text file.","interface":{"inputs":{"path":{"type":"string"},"text":{"type":"string"}},"outputs":{"bounced":{"type":"string"},"written":{"type":"null"}}},"implementations":{"cranq":{"nodes":{"sync path & text":{"coordinates":[0,0],"description":"","params":{"fields":"[\"path\",\"text\"]"},"prototype":"flow/Syncer"},"write text":{"coordinates":[0,0],"description":"","params":{},"prototype":"io/file/Text writer/_"}},"connections":{"sync path & text":{"synced":{"write text":{"path & text":{"description":""}}}}},"forwards":{"inputs":{"path":{"sync path & text":{"path":{}}},"text":{"sync path & text":{"text":{}}}},"outputs":{"bounced":{"write text":{"bounced":{}}},"written":{"write text":{"written":{}}}}}}}},"io/file/Text writer/_":{"description":"","interface":{"inputs":{"path & text":{"type":"{\"path\":string,\"text\":string}"}},"outputs":{"bounced":{"type":"string"},"written":{"type":"null"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"path & text":"const {writeFile} = require(\"fs\");\nconst {path, text} = data;\nwriteFile(path, text, (error) => {\n  if (error) {\n    outputs.bounced(data, tag);\n  } else {\n    outputs.written(null, tag);\n  }\n});"}}}},"io/http/Bearer token inserter":{"description":"Inserts bearer token into a HTTP request header.","interface":{"inputs":{"headers":{"description":"","type":"any"},"token":{"description":"","type":"any"}},"outputs":{"headers":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"build auth header":{"coordinates":[41,93],"description":"","params":{"template":"\"Bearer {token}\""},"prototype":"string/Template filler"},"add auth header":{"coordinates":[74,-77],"description":"","params":{"key":"\"Authorization\""},"prototype":"data/dictionary/Item setter"},"wrap token":{"coordinates":[-88,41],"description":"","params":{"fields":"[\"token\"]"},"prototype":"flow/Syncer"}},"connections":{"build auth header":{"filled":{"add auth header":{"value":{"description":""}}}},"wrap token":{"synced":{"build auth header":{"params":{"description":""}}}}},"forwards":{"inputs":{"headers":{"add auth header":{"dict":{}}},"token":{"wrap token":{"token":{}}}},"outputs":{"headers":{"add auth header":{"dict":{}}}}}}}},"io/http/Request dispatcher":{"description":"Dispatches HTTP request and outputs response or error.","interface":{"inputs":{"verb":{"type":"\"GET\" or \"POST\" or \"PUT\" or \"PATCH\" or \"DELETE\""},"url":{"type":"string"},"headers":{"type":"{string:string}"},"body":{"type":"string"}},"outputs":{"status":{"type":"string"},"headers":{"type":"{string:string}"},"body":{"type":"string"},"error":{"type":"string"}}},"implementations":{"cranq":{"nodes":{"sync request":{"coordinates":[0,0],"description":"","params":{"fields":"[\"verb\",\"url\",\"headers\",\"body\"]"},"prototype":"flow/Syncer"},"dispatch request":{"coordinates":[0,0],"description":"","params":{},"prototype":"io/http/Request dispatcher/_"},"split response":{"coordinates":[0,0],"description":"","params":{"fields":"[\"status\",\"headers\",\"body\"]"},"prototype":"flow/Splitter"}},"connections":{"sync request":{"synced":{"dispatch request":{"verb & url & headers & body":{"description":""}}}},"dispatch request":{"response":{"split response":{"unsplit":{"description":""}}}}},"forwards":{"inputs":{"verb":{"sync request":{"verb":{}}},"url":{"sync request":{"url":{}}},"headers":{"sync request":{"headers":{}}},"body":{"sync request":{"body":{}}}},"outputs":{"error":{"dispatch request":{"error":{}}},"status":{"split response":{"status":{}}},"headers":{"split response":{"headers":{}}},"body":{"split response":{"body":{}}}}}}}},"io/http/Request dispatcher/_":{"description":"","interface":{"inputs":{"verb & url & headers & body":{"type":"{\"verb\":\"GET\" or \"POST\" or \"PUT\" or \"PATCH\" or \"DELETE\",\"url\":string,\"headers\":{string:string},\"body\":any}"}},"outputs":{"response":{"type":"{\"status\":string,\"headers\":{string:string},\"body\":string}"},"error":{"type":"string"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"verb & url & headers & body":"const {verb, url, headers = {}, body} = data;\nconst {port, protocol, hostname, pathname, search} = new URL(url);\nconst isHttps = protocol === \"https:\";\nconst {request} = isHttps ? require(\"https\") : require(\"http\");\nconst options = {\n  hostname,\n  port: port || isHttps ? 443 : 80,\n  path: pathname + search,\n  method: verb,\n  headers: body !== undefined\n    ? {\n      ...headers,\n      \"Content-Length\": Buffer.byteLength(body)\n    }\n    : headers\n};\nconst resultChunks = [];\nconst req = request(options, (response) => {\n  response.on(\"data\", (chunk) => {\n    resultChunks.push(String(chunk));\n  });\n  response.on(\"end\", () => {\n    outputs.response({\n      status: response.statusCode,\n      headers: response.headers,\n      body: resultChunks.join(\"\")\n    }, tag);\n  });\n});\nreq.on(\"error\", (error) => {\n  outputs.error({error: String(error)}, tag);\n});\nif (body !== undefined) {\n  req.write(body);\n}\nreq.end();\n"}}}},"io/stdio/Line writer":{"description":"Writes a line to standard output.","interface":{"inputs":{"line":{"type":"string"}},"outputs":{}},"implementations":{"cranq":{"nodes":{"prepare line":{"coordinates":[0,0],"description":"","params":{"b":"\"\\n\""},"prototype":"string/Concatenator"},"write text":{"coordinates":[0,0],"description":"","params":{},"prototype":"io/stdio/Text writer"}},"connections":{"prepare line":{"concatenated":{"write text":{"text":{"description":""}}}}},"forwards":{"inputs":{"line":{"prepare line":{"a":{}}}},"outputs":{}}}}},"io/stdio/Text writer":{"description":"Writes to standard output.","interface":{"inputs":{"text":{"type":"string"}},"outputs":{}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"text":"process.stdout.write(data);"}}}},"json/Serializer":{"description":"","interface":{"inputs":{"data":{"description":"","type":"any"},"pretty":{"description":"","type":"any"}},"outputs":{"json":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"sync data & pretty":{"coordinates":[-53,56],"description":"","params":{"fields":"[\"data\", \"pretty\"]"},"prototype":"flow/Syncer"},"serialize":{"coordinates":[43,-47],"description":"","params":{},"prototype":"json/Serializer/_"}},"connections":{"sync data & pretty":{"synced":{"serialize":{"data & pretty":{"description":""}}}}},"forwards":{"inputs":{"data":{"sync data & pretty":{"data":{}}},"pretty":{"sync data & pretty":{"pretty":{}}}},"outputs":{"json":{"serialize":{"json":{}}}}}}}},"json/Serializer/_":{"description":"","interface":{"inputs":{"data & pretty":{"description":"","type":"any"}},"outputs":{"json":{"description":"","type":"any"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data & pretty":"outputs.json(JSON.stringify(data.data, null, data.pretty ? 2 : 0), tag);"}}}},"number/Abs":{"description":"Returns the absolute value of the input number.","interface":{"inputs":{"number":{"type":"number"}},"outputs":{"abs":{"type":"number"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"number":"outputs.abs(Math.abs(data), tag);"}}}},"number/Adder":{"description":"Adds 'b' to 'a'.","interface":{"inputs":{"a":{"type":"number"},"b":{"type":"number"}},"outputs":{"sum":{"type":"number"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\", \"b\"]"},"prototype":"flow/Syncer"},"add":{"coordinates":[0,0],"description":"","params":{},"prototype":"number/Adder/_"}},"connections":{"sync a & b":{"synced":{"add":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"sum":{"add":{"sum":{}}}}}}}},"number/Adder/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":number,\"b\":number}"}},"outputs":{"sum":{"type":"number"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"outputs.sum(data.a + data.b, tag);"}}}},"number/Ceiling":{"description":"Returns the number rounded up to the nearest integer.","interface":{"inputs":{"number":{"type":"number"}},"outputs":{"ceiling":{"type":"number"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"number":"outputs.ceiling(Math.ceil(data), tag);"}}}},"number/Counter":{"description":"Counts input signals.","interface":{"inputs":{"trigger":{"type":"any"}},"outputs":{"count":{"type":"number"}}},"implementations":{"cranq":{"nodes":{"value":{"coordinates":[0,0],"description":"","params":{"data":"0"},"prototype":"data/Store"},"adder":{"coordinates":[0,0],"description":"","params":{"b":"1"},"prototype":"number/Adder"}},"connections":{"value":{"data":{"adder":{"a":{"description":""}}}},"adder":{"sum":{"value":{"data":{"description":""}}}}},"forwards":{"inputs":{"trigger":{"value":{"read":{}}}},"outputs":{"count":{"adder":{"sum":{}}}}}}}},"number/Divider":{"description":"Divides 'a' by 'b'. Bounces synced operands on division by zero.","interface":{"inputs":{"a":{"type":"number"},"b":{"type":"number"}},"outputs":{"fraction":{"type":"number"},"bounced":{"description":"Sends synced inputs on error.","type":"{\"a\":number,\"b\":number}"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\",\"b\"]"},"prototype":"flow/Syncer"},"divide":{"coordinates":[0,0],"description":"","params":{},"prototype":"number/Divider/_"}},"connections":{"sync a & b":{"synced":{"divide":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"fraction":{"divide":{"fraction":{}}},"bounced":{"divide":{"bounced":{}}}}}}}},"number/Divider/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":number,\"b\":number}"}},"outputs":{"fraction":{"type":"number"},"bounced":{"type":"typeof(a & b)"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"const {a, b} = data;\nif (b !== 0)\n  outputs.fraction(a / b, tag);\nelse\n  outputs.bounced(data, tag);\n"}}}},"number/Equality tester":{"description":"Checks if number 'a' is equal to number 'b'.","interface":{"inputs":{"a":{"type":"number"},"b":{"type":"number"}},"outputs":{"equal":{"type":"boolean"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\",\"b\"]"},"prototype":"flow/Syncer"},"equal":{"coordinates":[3,-88],"description":"","params":{},"prototype":"number/Equality tester/_"}},"connections":{"sync a & b":{"synced":{"equal":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"equal":{"equal":{"equal":{}}}}}}}},"number/Equality tester/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":number,\"b\":number}"}},"outputs":{"equal":{"type":"boolean"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"outputs.equal(data.a === data.b, tag);"}}}},"number/Even tester":{"description":"Tells whether a number is even.","interface":{"inputs":{"number":{"type":"number"}},"outputs":{"even":{"type":"boolean"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"number":"outputs.even(data % 2 === 0, tag);"}}}},"number/Floor":{"description":"Returns the number rounded down to the nearest integer.","interface":{"inputs":{"number":{"type":"number"}},"outputs":{"floor":{"type":"number"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"number":"outputs.floor(Math.floor(data), tag);"}}}},"number/Greater than tester":{"description":"Checks if 'a' is greater than 'b'.","interface":{"inputs":{"a":{"type":"number"},"b":{"type":"number"}},"outputs":{"greater":{"type":"boolean"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\",\"b\"]"},"prototype":"flow/Syncer"},"greater than":{"coordinates":[0,0],"description":"","params":{},"prototype":"number/Greater than tester/_"}},"connections":{"sync a & b":{"synced":{"greater than":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"greater":{"greater than":{"greater":{}}}}}}}},"number/Greater than tester/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":number,\"b\":number}"}},"outputs":{"greater":{"type":"boolean"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"outputs.greater(data.a > data.b, tag);"}}}},"number/Less than tester":{"description":"Checks if 'a' is less than 'b'.","interface":{"inputs":{"a":{"type":"number"},"b":{"type":"number"}},"outputs":{"less":{"type":"boolean"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\",\"b\"]"},"prototype":"flow/Syncer"},"less than":{"coordinates":[0,0],"description":"","params":{},"prototype":"number/Less than tester/_"}},"connections":{"sync a & b":{"synced":{"less than":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"less":{"less than":{"less":{}}}}}}}},"number/Less than tester/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":number,\"b\":number}"}},"outputs":{"less":{"type":"boolean"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"outputs.less(data.a < data.b, tag);"}}}},"number/Max picker":{"description":"Picks the maximum out of two numbers.","interface":{"inputs":{"a":{"type":"number"},"b":{"type":"number"}},"outputs":{"max":{"type":"number"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\",\"b\"]"},"prototype":"flow/Syncer"},"pick max":{"coordinates":[0,0],"description":"","params":{},"prototype":"number/Max picker/_"}},"connections":{"sync a & b":{"synced":{"pick max":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"max":{"pick max":{"max":{}}}}}}}},"number/Max picker/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":number,\"b\":number}"}},"outputs":{"max":{"type":"number"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"outputs.max(Math.max(data.a, data.b), tag);"}}}},"number/Min picker":{"description":"Picks the minimum out of two numbers.","interface":{"inputs":{"a":{"type":"number"},"b":{"type":"number"}},"outputs":{"min":{"type":"number"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\",\"b\"]"},"prototype":"flow/Syncer"},"pick min":{"coordinates":[0,0],"description":"","params":{},"prototype":"number/Min picker/_"}},"connections":{"sync a & b":{"synced":{"pick min":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"min":{"pick min":{"min":{}}}}}}}},"number/Min picker/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":number,\"b\":number}"}},"outputs":{"min":{"type":"number"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"outputs.min(Math.min(data.a, data.b), tag);"}}}},"number/Modulo":{"description":"Takes modulo of 'a' and 'b'. Bounces synced operands on division by zero.","interface":{"inputs":{"a":{"type":"number"},"b":{"type":"number"}},"outputs":{"remainder":{"type":"number"},"bounced":{"description":"Sends synced inputs on error.","type":"{\"a\":number,\"b\":number}"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\",\"b\"]"},"prototype":"flow/Syncer"},"modulo":{"coordinates":[0,0],"description":"","params":{},"prototype":"number/Modulo/_"}},"connections":{"sync a & b":{"synced":{"modulo":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"remainder":{"modulo":{"remainder":{}}},"bounced":{"modulo":{"bounced":{}}}}}}}},"number/Modulo/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":number,\"b\":number}"}},"outputs":{"remainder":{"type":"number"},"bounced":{"type":"typeof(a & b)"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"const {a, b} = data;\nif (b !== 0)\n  outputs.remainder(a % b, tag);\nelse\n  outputs.bounced(data, tag);\n"}}}},"number/Multiplier":{"description":"Multiplies two numbers together.","interface":{"inputs":{"a":{"type":"number"},"b":{"type":"number"}},"outputs":{"product":{"type":"number"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\", \"b\"]"},"prototype":"flow/Syncer"},"multiply":{"coordinates":[0,0],"description":"","params":{},"prototype":"number/Multiplier/_"}},"connections":{"sync a & b":{"synced":{"multiply":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"product":{"multiply":{"product":{}}}}}}}},"number/Multiplier/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":number,\"b\":number}"}},"outputs":{"product":{"type":"number"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"outputs.product(data.a * data.b, tag);"}}}},"number/Odd tester":{"description":"Tells whether a number is odd.","interface":{"inputs":{"number":{"type":"number"}},"outputs":{"odd":{"type":"boolean"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"number":"outputs.odd(data % 2 !== 0, tag);"}}}},"number/Parser":{"description":"Converts a string to number.","interface":{"inputs":{"string":{"type":"string"}},"outputs":{"number":{"type":"number"},"bounced":{"type":"string"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"string":"const number = parseFloat(data);\nif (isNaN(number))\n  outputs.bounced(data, tag);\nelse\n  outputs.number(number, tag);\n"}}}},"number/Power":{"description":"","interface":{"inputs":{"base":{"type":"number"},"exponent":{"type":"number"}},"outputs":{"power":{"type":"number"}}},"implementations":{"cranq":{"nodes":{"sync base & exponent":{"coordinates":[0,0],"description":"","params":{"fields":"[\"base\",\"exponent\"]"},"prototype":"flow/Syncer"},"power":{"coordinates":[0,0],"description":"","params":{},"prototype":"number/Power/_"}},"connections":{"sync base & exponent":{"synced":{"power":{"base & exponent":{"description":""}}}}},"forwards":{"inputs":{"base":{"sync base & exponent":{"base":{}}},"exponent":{"sync base & exponent":{"exponent":{}}}},"outputs":{"power":{"power":{"power":{}}}}}}}},"number/Power/_":{"description":"","interface":{"inputs":{"base & exponent":{"type":"{\"base\":number,\"exponent\":number}"}},"outputs":{"power":{"type":"number"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"base & exponent":"outputs.power(Math.pow(data.base, data.exponent), tag);"}}}},"number/Rounder":{"description":"Returns the number rounded to the nearest integer.","interface":{"inputs":{"number":{"type":"number"}},"outputs":{"rounded":{"type":"number"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"number":"outputs.rounded(Math.round(data), tag);"}}}},"number/Subtractor":{"description":"Takes the difference of 'a' and 'b'.","interface":{"inputs":{"a":{"type":"number"},"b":{"type":"number"}},"outputs":{"diff":{"type":"number"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\", \"b\"]"},"prototype":"flow/Syncer"},"subtract":{"coordinates":[0,0],"description":"","params":{},"prototype":"number/Subtractor/_"}},"connections":{"sync a & b":{"synced":{"subtract":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"diff":{"subtract":{"diff":{}}}}}}}},"number/Subtractor/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":number,\"b\":number}"}},"outputs":{"diff":{"type":"number"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"outputs.diff(data.a - data.b, tag);"}}}},"number/Type tester":{"description":"Tells whether the input is a number.","interface":{"inputs":{"data":{"type":"any"}},"outputs":{"is number":{"type":"is number"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data":"outputs[\"is number\"](typeof data === \"number\", tag);"}}}},"string/Concatenator":{"description":"","interface":{"inputs":{"a":{"type":"string"},"b":{"type":"string"}},"outputs":{"concatenated":{"type":"string"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\",\"b\"]"},"prototype":"flow/Syncer"},"concat":{"coordinates":[0,0],"description":"","params":{},"prototype":"string/Concatenator/_"}},"connections":{"sync a & b":{"synced":{"concat":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"concatenated":{"concat":{"concatenated":{}}}}}}}},"string/Concatenator/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":string,\"b\":string}"}},"outputs":{"concatenated":{"type":"string"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"outputs.concatenated(data.a + data.b, tag);"}}}},"string/Emptiness tester":{"description":"Tells whether the input string is empty.","interface":{"inputs":{"string":{"type":"string"}},"outputs":{"empty":{"type":"boolean"}}},"implementations":{"cranq":{"nodes":{"get length":{"coordinates":[0,0],"description":"","params":{},"prototype":"string/Length getter"},"zero":{"coordinates":[0,0],"description":"","params":{"data":"0"},"prototype":"data/Store"},"is equal":{"coordinates":[0,0],"description":"","params":{},"prototype":"number/Equality tester"}},"connections":{"get length":{"length":{"zero":{"read":{"description":""}},"is equal":{"a":{"description":""}}}},"zero":{"data":{"is equal":{"b":{"description":""}}}}},"forwards":{"inputs":{"string":{"get length":{"string":{}}}},"outputs":{"empty":{"is equal":{"equal":{}}}}}}}},"string/Equality tester":{"description":"Checks if string 'a' is equal to string 'b'.","interface":{"inputs":{"a":{"type":"string"},"b":{"type":"string"}},"outputs":{"equal":{"type":"boolean"}}},"implementations":{"cranq":{"nodes":{"sync a & b":{"coordinates":[0,0],"description":"","params":{"fields":"[\"a\",\"b\"]"},"prototype":"flow/Syncer"},"equal":{"coordinates":[0,0],"description":"","params":{},"prototype":"string/Equality tester/_"}},"connections":{"sync a & b":{"synced":{"equal":{"a & b":{"description":""}}}}},"forwards":{"inputs":{"a":{"sync a & b":{"a":{}}},"b":{"sync a & b":{"b":{}}}},"outputs":{"equal":{"equal":{"equal":{}}}}}}}},"string/Equality tester/_":{"description":"","interface":{"inputs":{"a & b":{"type":"{\"a\":string,\"b\":string}"}},"outputs":{"equal":{"type":"boolean"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"a & b":"outputs.equal(data.a === data.b, tag);"}}}},"string/Joiner":{"description":"Joins an ordered list of strings into a single string.","interface":{"inputs":{"separator":{"type":"string"},"substrings":{"type":"string[]"}},"outputs":{"joined":{"type":"string"}}},"implementations":{"cranq":{"nodes":{"sync separator & substrings":{"coordinates":[0,0],"description":"","params":{"fields":"[\"separator\",\"substrings\"]"},"prototype":"flow/Syncer"},"join":{"coordinates":[0,0],"description":"","params":{},"prototype":"string/Joiner/_"}},"connections":{"sync separator & substrings":{"synced":{"join":{"separator & substrings":{"description":""}}}}},"forwards":{"inputs":{"separator":{"sync separator & substrings":{"separator":{}}},"substrings":{"sync separator & substrings":{"substrings":{}}}},"outputs":{"joined":{"join":{"joined":{}}}}}}}},"string/Joiner/_":{"description":"","interface":{"inputs":{"separator & substrings":{"type":"{\"separator\":string,\"substrings\":string[]}"}},"outputs":{"joined":{"type":"string"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"separator & substrings":"outputs.joined(data.substrings.join(data.separator), tag);"}}}},"string/Length getter":{"description":"Determines the length of the input string.","interface":{"inputs":{"string":{"type":"string"}},"outputs":{"length":{"type":"number"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"string":"outputs.length(data.length, tag);"}}}},"string/Regex tester":{"description":"Tests whether the input string matches a regular expression.","interface":{"inputs":{"string":{"type":"string"},"regex":{"type":"string"}},"outputs":{"matches":{"type":"boolean"}}},"implementations":{"cranq":{"nodes":{"sync regex & string":{"coordinates":[0,0],"description":"","params":{"fields":"[\"regex\",\"string\"]"},"prototype":"flow/Syncer"},"test regex":{"coordinates":[0,0],"description":"","params":{},"prototype":"string/Regex tester/_"}},"connections":{"sync regex & string":{"synced":{"test regex":{"regex & string":{"description":""}}}}},"forwards":{"inputs":{"string":{"sync regex & string":{"string":{}}},"regex":{"sync regex & string":{"regex":{}}}},"outputs":{"matches":{"test regex":{"matches":{}}}}}}}},"string/Regex tester/_":{"description":"","interface":{"inputs":{"regex & string":{"type":"{\"regex\":string,\"string\":string}"}},"outputs":{"matches":{"type":"boolean"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"regex & string":"outputs.matches(new RegExp(data.regex).test(data.string), tag);"}}}},"string/Splitter":{"description":"Splits incoming string along a specified separator string.","interface":{"inputs":{"separator":{"type":"string"},"string":{"type":"string"}},"outputs":{"substrings":{"type":"string[]"}}},"implementations":{"cranq":{"nodes":{"sync separator & string":{"coordinates":[0,0],"description":"","params":{"fields":"[\"separator\",\"string\"]"},"prototype":"flow/Syncer"},"split":{"coordinates":[0,0],"description":"","params":{},"prototype":"string/Splitter/_"}},"connections":{"sync separator & string":{"synced":{"split":{"separator & string":{"description":""}}}}},"forwards":{"inputs":{"separator":{"sync separator & string":{"separator":{}}},"string":{"sync separator & string":{"string":{}}}},"outputs":{"substrings":{"split":{"substrings":{}}}}}}}},"string/Splitter/_":{"description":"","interface":{"inputs":{"separator & string":{"type":"{\"separator\":string,\"string\":string}"}},"outputs":{"substrings":{"type":"string[]"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"separator & string":"outputs.substrings(data.string.split(data.separator), tag);"}}}},"string/Template filler":{"description":"Substitutes parameters into a template.","interface":{"inputs":{"template":{"type":"string"},"params":{"type":"{string:any}"}},"outputs":{"filled":{"type":"string"},"bounced":{"type":"{\"template\":string,\"params\":{string:any}}"}}},"implementations":{"cranq":{"nodes":{"sync template & params":{"coordinates":[-21,55],"description":"","params":{"fields":"[\"template\",\"params\"]"},"prototype":"flow/Syncer"},"fill template":{"coordinates":[11,-48],"description":"","params":{},"prototype":"string/Template filler/_"}},"connections":{"sync template & params":{"synced":{"fill template":{"template & params":{"description":""}}}}},"forwards":{"inputs":{"template":{"sync template & params":{"template":{}}},"params":{"sync template & params":{"params":{}}}},"outputs":{"filled":{"fill template":{"filled":{}}}}}}}},"string/Template filler/_":{"description":"","interface":{"inputs":{"template & params":{"type":"{\"template\":string,\"params\":{string:any}}"}},"outputs":{"filled":{"type":"string"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"template & params":"const {template, params} = data;\noutputs.filled(template.replace(\n  /{((?:[^}]|\\\\})*)}/g,\n  (match, key) => {\n    const param = params[key];\n    return param === undefined ? match : param;\n  }), tag);"}}}},"string/Type tester":{"description":"Tells whether the input is a string.","interface":{"inputs":{"data":{"type":"any"}},"outputs":{"is string":{"type":"is string"}}},"implementations":{"es6-node":{"cleanupFunction":"","dependencies":{},"initFunction":"","inputFunctions":{"data":"outputs[\"is string\"](typeof data === \"string\", tag);"}}}},"testing/Asserter":{"description":"","interface":{"inputs":{"actual":{"description":"","type":"any"},"expected":{"description":"","type":"any"},"success":{"description":"","type":"any"},"template":{"description":"","type":"any"}},"outputs":{"assertion":{"description":"","type":"any"},"expected":{"description":"","type":"any"},"actual":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"build message":{"coordinates":[-158,85],"description":"","params":{},"prototype":"string/Template filler"},"sync serialized":{"coordinates":[-82,-44],"description":"","params":{"fields":"[\"actual\", \"expected\"]"},"prototype":"flow/Syncer"},"forward message":{"coordinates":[59,48],"description":"","params":{},"prototype":"flow/Gate"},"assertion":{"coordinates":[221,40],"description":"","params":{},"prototype":"flow/Forwarder"},"sync inputs":{"coordinates":[118,-79],"description":"","params":{},"prototype":"flow/Forwarder/double"},"success":{"coordinates":[-118,217],"description":"","params":{},"prototype":"flow/Forwarder"},"not":{"coordinates":[-53,143],"description":"","params":{},"prototype":"boolean/Not"},"forward null":{"coordinates":[147,182],"description":"","params":{"data":"null"},"prototype":"flow/Gate"},"serialize actual":{"coordinates":[-42,-151],"description":"","params":{"pretty":"true"},"prototype":"json/Serializer"},"Serializer A":{"coordinates":[-203,-150],"description":"","params":{"pretty":"true"},"prototype":"json/Serializer"}},"connections":{"build message":{"filled":{"forward message":{"data":{"description":""}}}},"forward message":{"data":{"assertion":{"data":{"description":""}}}},"forward null":{"data":{"assertion":{"data":{"description":""}}}},"sync serialized":{"synced":{"build message":{"params":{"description":""}}}},"success":{"data":{"not":{"a":{"description":""}},"forward null":{"open":{"description":""}}}},"not":{"not":{"forward message":{"open":{"description":""}}}},"sync inputs":{"1":{"serialize actual":{"data":{"description":""}}},"2":{"Serializer A":{"data":{"description":""}}}},"serialize actual":{"json":{"sync serialized":{"actual":{"description":""}}}},"Serializer A":{"json":{"sync serialized":{"expected":{"description":""}}}}},"forwards":{"inputs":{"actual":{"sync inputs":{"1":{}}},"expected":{"sync inputs":{"2":{}}},"success":{"success":{"data":{}}},"template":{"build message":{"template":{}}}},"outputs":{"assertion":{"assertion":{"data":{}}},"expected":{"sync inputs":{"2":{}}},"actual":{"sync inputs":{"1":{}}}}}}}},"testing/Result aggregator":{"description":"","interface":{"inputs":{"reset":{"description":"","type":"any"},"result":{"description":"","type":"any"}},"outputs":{"results":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"split assertions & descriptions":{"coordinates":[-52,147],"description":"","params":{"fields":"[\"assertions\",\"descriptions\"]"},"prototype":"flow/Splitter"},"store result":{"coordinates":[74,64],"description":"","params":{},"prototype":"data/tree/Node setter/mutable"},"empty set":{"coordinates":[-203,-108],"description":"","params":{"data":"{}"},"prototype":"data/Store"},"result":{"coordinates":[-197,72],"description":"","params":{},"prototype":"flow/Forwarder"},"results":{"coordinates":[-58,-36],"description":"","params":{},"prototype":"data/Store"},"debounce results":{"coordinates":[241,-23],"description":"","params":{"delay":"500"},"prototype":"flow/Debouncer"},"wait to finish":{"coordinates":[115,-104],"description":"","params":{},"prototype":"flow/Forwarder/double"}},"connections":{"result":{"data":{"split assertions & descriptions":{"unsplit":{"description":""}},"results":{"read":{"description":""}}}},"empty set":{"data":{"results":{"data":{"description":""}}}},"results":{"data":{"store result":{"tree":{"description":""}},"wait to finish":{"1":{"description":""}}}},"store result":{"written":{"wait to finish":{"2":{"description":""}}}},"wait to finish":{"1":{"debounce results":{"data":{"description":""}}}},"split assertions & descriptions":{"assertions":{"store result":{"node":{"description":""}}},"descriptions":{"store result":{"path":{"description":""}}}}},"forwards":{"inputs":{"reset":{"empty set":{"read":{}}},"result":{"result":{"data":{}}}},"outputs":{"results":{"debounce results":{"data":{}}}}}}}},"testing/Sameness asserter":{"description":"","interface":{"inputs":{"actual":{"description":"","type":"any"},"expected":{"description":"","type":"any"}},"outputs":{"assertion":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"assert":{"coordinates":[-61,-43],"description":"","params":{"template":"\"Sameness assertion failed. Actual: {actual}, Expected: {expected}.\""},"prototype":"testing/Asserter"},"same?":{"coordinates":[87,56],"description":"","params":{},"prototype":"data/Sameness tester"}},"connections":{"same?":{"same":{"assert":{"success":{"description":""}}}},"assert":{"expected":{"same?":{"b":{"description":""}}},"actual":{"same?":{"a":{"description":""}}}}},"forwards":{"inputs":{"actual":{"assert":{"actual":{}}},"expected":{"assert":{"expected":{}}}},"outputs":{"assertion":{"assert":{"assertion":{}}}}}}}},"testing/Suite describer":{"description":"","interface":{"inputs":{"result":{"description":"","type":"any"},"description":{"description":"","type":"any"}},"outputs":{"result":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"split assertions & descriptions":{"coordinates":[-72,74],"description":"","params":{"fields":"[\"descriptions\", \"assertions\"]"},"prototype":"flow/Splitter"},"sync success & descriptions":{"coordinates":[164,-33],"description":"","params":{"fields":"[\"descriptions\", \"assertions\"]"},"prototype":"flow/Syncer"},"assertions":{"coordinates":[61,131],"description":"","params":{},"prototype":"flow/Forwarder"},"wrap description":{"coordinates":[-46,-125],"description":"","params":{"count":"1"},"prototype":"data/array/Builder"},"append description":{"coordinates":[83,-86],"description":"","params":{},"prototype":"data/array/Concatenator"},"sync inputs":{"coordinates":[-183,0],"description":"","params":{},"prototype":"flow/Forwarder/double"}},"connections":{"sync inputs":{"1":{"split assertions & descriptions":{"unsplit":{"description":""}}},"2":{"wrap description":{"item":{"description":""}}}},"wrap description":{"array":{"append description":{"a":{"description":""}}}},"assertions":{"data":{"sync success & descriptions":{"assertions":{"description":""}}}},"append description":{"concatenated":{"sync success & descriptions":{"descriptions":{"description":""}}}},"split assertions & descriptions":{"assertions":{"assertions":{"data":{"description":""}}},"descriptions":{"append description":{"b":{"description":""}}}}},"forwards":{"inputs":{"result":{"sync inputs":{"1":{}}},"description":{"sync inputs":{"2":{}}}},"outputs":{"result":{"sync success & descriptions":{"synced":{}}}}}}}},"testing/Test describer":{"description":"","interface":{"inputs":{"assertions":{"description":"","type":"any"},"description":{"description":"","type":"any"}},"outputs":{"result":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"wrap description":{"coordinates":[11,76],"description":"","params":{"count":"1"},"prototype":"data/array/Builder"},"sync success & descriptions":{"coordinates":[42,-65],"description":"","params":{"fields":"[\"assertions\",\"descriptions\"]"},"prototype":"flow/Syncer"},"sync inputs":{"coordinates":[-79,-2],"description":"","params":{},"prototype":"flow/Forwarder/double"}},"connections":{"sync inputs":{"1":{"sync success & descriptions":{"assertions":{"description":""}}},"2":{"wrap description":{"item":{"description":""}}}},"wrap description":{"array":{"sync success & descriptions":{"descriptions":{"description":""}}}}},"forwards":{"inputs":{"assertions":{"sync inputs":{"1":{}}},"description":{"sync inputs":{"2":{}}}},"outputs":{"result":{"sync success & descriptions":{"synced":{}}}}}}}},"root":{"description":"Project root","interface":{"inputs":{},"outputs":{}},"implementations":{"cranq":{"nodes":{"100":{"coordinates":[-170,78.203125],"description":"","params":{"data":"100"},"prototype":"data/Store"},"start":{"coordinates":[-427,-3],"description":"","params":{},"prototype":"flow/Starter"},"log":{"coordinates":[637,78],"description":"","params":{},"prototype":"debug/Data logger"},"emp/test/build":{"coordinates":[-181,-156.796875],"description":"","params":{},"prototype":"emp/test/build"},"emp/get/id":{"coordinates":[107,-81.796875],"description":"","params":{},"prototype":"emp/get/id"},"emp/set/dept A":{"coordinates":[357,-8.796875],"description":"","params":{},"prototype":"emp/set/dept"},"legal":{"coordinates":[-169,171.203125],"description":"","params":{"data":"\"Legal\""},"prototype":"data/Store"}},"connections":{"100":{"data":{"emp/get/id":{"ID":{"description":""}}}},"start":{"start":{"100":{"read":{"description":""}},"emp/test/build":{"build":{"description":""}},"legal":{"read":{"description":""}}}},"emp/test/build":{"records":{"emp/get/id":{"records":{"description":""}}}},"emp/get/id":{"record":{"emp/set/dept A":{"record":{"description":""}}}},"legal":{"data":{"emp/set/dept A":{"dept":{"description":""}}}},"emp/set/dept A":{"record":{"log":{"data":{"description":""}}}}},"forwards":{"inputs":{},"outputs":{}}}}},"emp/test/build":{"description":"","interface":{"inputs":{"build":{"description":"","type":"any"}},"outputs":{"records":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"schema":{"coordinates":[1,-51],"description":"","params":{"data":"[\"EmpID\",\"Name\",\"Dept\",\"HireDate\",\"Salary\"]"},"prototype":"data/Store"},"record_1":{"coordinates":[1,80],"description":"","params":{"data":"[100,\"Harold\",\"Accounting\",\"2020-11-08\",1500]"},"prototype":"data/Store"},"Builder/keys & values A":{"coordinates":[169,-3],"description":"","params":{},"prototype":"data/dictionary/Builder/keys & values"},"Forwarder A":{"coordinates":[-155,1],"description":"","params":{},"prototype":"flow/Forwarder"},"record_2":{"coordinates":[-2,183],"description":"","params":{"data":"[101,\"Sue\",\"Facilities\",\"2019-02-13\",1500]"},"prototype":"data/Store"},"Builder/keys & values B":{"coordinates":[174,184],"description":"","params":{},"prototype":"data/dictionary/Builder/keys & values"},"Syncer A":{"coordinates":[362,2],"description":"","params":{"fields":"[0,1]"},"prototype":"flow/Syncer"}},"connections":{"schema":{"data":{"Builder/keys & values A":{"keys":{"description":""}},"Builder/keys & values B":{"keys":{"description":""}}}},"record_1":{"data":{"Builder/keys & values A":{"values":{"description":""}}}},"Forwarder A":{"data":{"schema":{"read":{"description":""}},"record_1":{"read":{"description":""}},"record_2":{"read":{"description":""}}}},"record_2":{"data":{"Builder/keys & values B":{"values":{"description":""}}}},"Builder/keys & values A":{"dict":{"Syncer A":{"0":{"description":""}}}},"Builder/keys & values B":{"dict":{"Syncer A":{"1":{"description":""}}}}},"forwards":{"inputs":{"build":{"Forwarder A":{"data":{}}}},"outputs":{"records":{"Syncer A":{"synced":{}}}}}}}},"emp/set/dept":{"description":"","interface":{"inputs":{"record":{"description":"","type":"any"},"dept":{"description":"","type":"any"}},"outputs":{"record":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"Item setter A":{"coordinates":[10,51],"description":"","params":{"key":"\"Dept\""},"prototype":"data/dictionary/Item setter"}},"connections":{},"forwards":{"inputs":{"record":{"Item setter A":{"dict":{}}},"dept":{"Item setter A":{"value":{}}}},"outputs":{"record":{"Item setter A":{"dict":{}}}}}}}},"emp/get/id":{"description":"","interface":{"inputs":{"records":{"description":"","type":"any"},"ID":{"description":"","type":"any"}},"outputs":{"record":{"description":"","type":"any"}}},"implementations":{"cranq":{"nodes":{"filter":{"coordinates":[18,-112],"description":"","params":{},"prototype":"data/array/Filter"},"get ID":{"coordinates":[-103,71],"description":"","params":{"key":"\"EmpID\""},"prototype":"data/dictionary/Item getter"},"Equality tester A":{"coordinates":[108,202],"description":"","params":{},"prototype":"number/Equality tester"},"ID":{"coordinates":[-120,207],"description":"","params":{},"prototype":"data/Store"},"First item getter A":{"coordinates":[320,-2],"description":"","params":{},"prototype":"data/array/First item getter"}},"connections":{"filter":{"item":{"get ID":{"dict":{"description":""}}},"filtered":{"First item getter A":{"array":{"description":""}}}},"get ID":{"value":{"Equality tester A":{"b":{"description":""}},"ID":{"read":{"description":""}}}},"Equality tester A":{"equal":{"filter":{"include item":{"description":""}}}},"ID":{"data":{"Equality tester A":{"a":{"description":""}}}}},"forwards":{"inputs":{"records":{"filter":{"array":{}}},"ID":{"ID":{"data":{}}}},"outputs":{"record":{"First item getter A":{"item":{}}}}}}}},"Node 1":{"description":"","interface":{"inputs":{},"outputs":{}},"implementations":{"cranq":{"nodes":{},"connections":{},"forwards":{"inputs":{},"outputs":{}}}}},"e":{"description":"","interface":{"inputs":{},"outputs":{}},"implementations":{"cranq":{"nodes":{},"connections":{},"forwards":{"inputs":{},"outputs":{}}}}},"Node 2":{"description":"","interface":{"inputs":{},"outputs":{}},"implementations":{"cranq":{"nodes":{},"connections":{},"forwards":{"inputs":{},"outputs":{}}}}}},"rootPrototypeId":"root"}